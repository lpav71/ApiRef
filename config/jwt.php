<?php

/*
 * This file is part of jwt-auth.
 *
 * (c) Sean Tymon <tymon148@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

return [

    /*
    |--------------------------------------------------------------------------
    | JWT Authentication Secret
    |--------------------------------------------------------------------------
    |
    | Don't forget to set this in your .env file, as it will be used to sign
    | your tokens. A helper command is provided for this:
    | `php artisan jwt:secret`
    |
    | Note: This will be used for Symmetric algorithms only (HMAC),
    | since RSA and ECDSA use a private/public key combo (See below).
    |
    */

    'secret' => env('JWT_SECRET'),

    /*
    |--------------------------------------------------------------------------
    | JWT Authentication Keys
    |--------------------------------------------------------------------------
    |
    | The algorithm you are using, will determine whether your tokens are
    | signed with a random string (defined in `JWT_SECRET`) or using the
    | following public & private keys.
    |
    | Symmetric Algorithms:
    | HS256, HS384 & HS512 will use `JWT_SECRET`.
    |
    | Asymmetric Algorithms:
    | RS256, RS384 & RS512 / ES256, ES384 & ES512 will use the keys below.
    |
    */

    'keys' => [

        /*
        |--------------------------------------------------------------------------
        | Public Key
        |--------------------------------------------------------------------------
        |
        | A path or resource to your public key.
        |
        | E.g. 'file://path/to/public/key'
        |
        */

        'public' => env('JWT_PUBLIC_KEY'),

        /*
        |--------------------------------------------------------------------------
        | Private Key
        |--------------------------------------------------------------------------
        |
        | A path or resource to your private key.
        |
        | E.g. 'file://path/to/private/key'
        |
        */

        'private' => env('JWT_PRIVATE_KEY'),

        /*
        |--------------------------------------------------------------------------
        | Passphrase
        |--------------------------------------------------------------------------
        |
        | The passphrase for your private key. Can be null if none set.
        |
        */

        'passphrase' => env('JWT_PASSPHRASE'),

    ],

    /*
    |--------------------------------------------------------------------------
    | JWT time to live
    |--------------------------------------------------------------------------
    |
    | Укажите период времени (в минутах), в течение которого токен будет действителен.
    | По умолчанию установлено значение 1 час.
    |
    | Вы также можете установить это значение равным null, чтобы получить токен, срок действия которого никогда не истекает.
    | Некоторым людям может потребоваться такое поведение, например, для мобильного приложения.
    | Это не особенно рекомендуется, поэтому убедитесь, что у вас есть соответствующие
    | системы для отзыва токена в случае необходимости.
    | Примечание: Если вы установите для этого значение null, вам следует удалить элемент 'exp' из списка 'required_claims'.
    |
    */

    'ttl' => env('JWT_TTL', 60),

    /*
    |--------------------------------------------------------------------------
    | Refresh time to live
    |--------------------------------------------------------------------------
    |
    | Укажите период времени (в минутах), в течение которого токен может быть обновлен
    | в течение. т.е. Пользователь может обновить этот токен в течение 2 недель после
    | создания исходного токена, пока ему не потребуется повторная аутентификация.
    | По умолчанию установлено значение 2 недели.
    |
    | Вы также можете установить это значение равным null, чтобы получить бесконечное время обновления.
    | Некоторые могут захотеть это вместо никогда не истекающих токенов, например, для мобильного приложения.
    | Это не особенно рекомендуется, поэтому убедитесь, что у вас есть соответствующие
    | существуют системы для отзыва токена в случае необходимости.
    |
    */

    'refresh_ttl' => env('JWT_REFRESH_TTL', 20160),

    /*
    |--------------------------------------------------------------------------
    | JWT hashing algorithm
    |--------------------------------------------------------------------------
    |
    | Specify the hashing algorithm that will be used to sign the token.
    |
    */

    'algo' => env('JWT_ALGO', Tymon\JWTAuth\Providers\JWT\Provider::ALGO_HS256),

    /*
    |--------------------------------------------------------------------------
    | Required Claims
    |--------------------------------------------------------------------------
    |
    | Specify the required claims that must exist in any token.
    | A TokenInvalidException will be thrown if any of these claims are not
    | present in the payload.
    |
    */

    'required_claims' => [
        'iss',
        'iat',
        'exp',
        'nbf',
        'sub',
        'jti',
    ],

    /*
    |--------------------------------------------------------------------------
    | Persistent Claims
    |--------------------------------------------------------------------------
    |
    | Укажите ключи утверждения, которые будут сохраняться при обновлении токена.
    | `sub` и `it` будут автоматически сохранены в
    | дополнение к этим утверждениям.
    |
    | Примечание: Если утверждение не существует, то оно будет проигнорировано.
    |
    */

    'persistent_claims' => [
        // 'foo',
        // 'bar',
    ],

    /*
    |--------------------------------------------------------------------------
    | Lock Subject
    |--------------------------------------------------------------------------
    |
    | Это определит, будет ли автоматически добавлено утверждение "prv" к
    | токену. Цель этого - убедиться, что если у вас несколько
    | моделей аутентификации, например "Приложение\Пользователь" и "Приложение\Другое лицо", то мы
    | должен препятствовать тому, чтобы один запрос аутентификации выдавал себя за другой,
    | если 2 токена случайно имеют одинаковый идентификатор в 2 разных моделях.
    |
    | При определенных обстоятельствах вы можете захотеть отключить это поведение
    | например, если у вас есть только одна модель аутентификации, то вы бы сохранили
    | немного зависит от размера токена.
    |
    */

    'lock_subject' => true,

    /*
    |--------------------------------------------------------------------------
    | Leeway
    |--------------------------------------------------------------------------
    |
    | Это свойство дает заявлениям о временной метке jwt некоторую "свободу действий".
    | Это означает, что если у вас есть какой-либо неизбежный небольшой перекос часов на
    | любом из ваших серверов, то это обеспечит вам некоторый уровень защиты.
    |
    | Это относится к формулам `at`, `nbf` и `exp`.
    |
    | Укажите в секундах - только если вы знаете, что вам это нужно.
    |
    */

    'leeway' => env('JWT_LEEWAY', 0),

    /*
    |--------------------------------------------------------------------------
    | Blacklist Enabled
    |--------------------------------------------------------------------------
    |
    | Чтобы сделать токены недействительными, у вас должен быть включен черный список.
    | Если вы не хотите или нуждаетесь в этой функции, установите значение false.
    |
    */

    'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),

    /*
    | -------------------------------------------------------------------------
    | Blacklist Grace Period
    | -------------------------------------------------------------------------
    |
    | Когда выполняется несколько одновременных запросов с одним и тем же JWT,
    | возможно, что некоторые из них завершаются ошибкой из-за регенерации токена
    | при каждом запросе.
    |
    | Установите льготный период в секундах, чтобы предотвратить сбой параллельного запроса.
    |
    */

    'blacklist_grace_period' => env('JWT_BLACKLIST_GRACE_PERIOD', 0),

    /*
    |--------------------------------------------------------------------------
    | Cookies encryption
    |--------------------------------------------------------------------------
    |
    | По умолчанию Laravel шифрует файлы cookie по соображениям безопасности.
    | Если вы решите не расшифровывать файлы cookie, вам придется настроить Laravel
    | чтобы не шифровать ваш токен cookie, добавив его имя в $except
    | массив доступен в промежуточном программном обеспечении "EncryptCookies", предоставляемом Laravel.
    | подробности смотрите в разделе https://laravel.com/docs/master/responses#cookies-and-encryption
    |.
    |
    | Установите значение true, если вы хотите расшифровать файлы cookie.
    |
    */

    'decrypt_cookies' => false,

    /*
    |--------------------------------------------------------------------------
    | Providers
    |--------------------------------------------------------------------------
    |
    | Specify the various providers used throughout the package.
    |
    */

    'providers' => [

        /*
        |--------------------------------------------------------------------------
        | JWT Provider
        |--------------------------------------------------------------------------
        |
        | Specify the provider that is used to create and decode the tokens.
        |
        */

        'jwt' => Tymon\JWTAuth\Providers\JWT\Lcobucci::class,

        /*
        |--------------------------------------------------------------------------
        | Authentication Provider
        |--------------------------------------------------------------------------
        |
        | Specify the provider that is used to authenticate users.
        |
        */

        'auth' => Tymon\JWTAuth\Providers\Auth\Illuminate::class,

        /*
        |--------------------------------------------------------------------------
        | Storage Provider
        |--------------------------------------------------------------------------
        |
        | Specify the provider that is used to store tokens in the blacklist.
        |
        */

        'storage' => Tymon\JWTAuth\Providers\Storage\Illuminate::class,

    ],

];
